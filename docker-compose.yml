name: port-au-next
services:
  # Shared PostgreSQL database
  postgres:
    image: postgres:17-alpine
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - port_au_next_network

  # Minio Object Storage
  minio:
    image: minio/minio:latest
    restart: always
    volumes:
      - minio_data:/data
      - ./minio/policies:/policies
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: http://${MINIO_HOST}
    command: server /data --console-address ":9001" --address ":80"
    ports:
      - "9000:9000"
      - "9001:9001"  # Expose console port locally
    networks:
      - port_au_next_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - deployment-manager
    networks:
      - port_au_next_network
  
  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - port_au_next_network

  # Image optimization service
  imgproxy:
    image: darthsim/imgproxy:latest
    restart: always
    environment:
      IMGPROXY_BIND: ":80"
      IMGPROXY_READ_TIMEOUT: "10"
      IMGPROXY_WRITE_TIMEOUT: "10"
      IMGPROXY_DOWNLOAD_TIMEOUT: "10"
      IMGPROXY_CONCURRENCY: "100"
      IMGPROXY_MAX_CLIENTS: "100"
      IMGPROXY_TTL: "2592000"
      IMGPROXY_USE_REDIS: "1"
      IMGPROXY_REDIS_URL: "redis://redis:6379/0"
      IMGPROXY_QUALITY: "80"
      IMGPROXY_MAX_SRC_RESOLUTION: "50"
      IMGPROXY_MAX_SRC_FILE_SIZE: "20971520"
    networks:
      - port_au_next_network

  # Deployment manager
  deployment-manager:
    build:
      context: ./deployment-manager
      dockerfile: Dockerfile
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./apps:/app/apps:rw
      - ./deployment-manager/public:/app/public:ro
      - ~/.ssh/id_rsa:/home/node/.ssh/id_rsa:ro
      - ~/.ssh/id_rsa.pub:/home/node/.ssh/id_rsa.pub:ro
      - ./nginx:/app/nginx:rw
      - ./docker-compose.yml:/app/docker-compose.yml:ro
      - ./minio/policies:/app/minio/policies
    environment:
      - NODE_ENV=production
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - HOST_APPS_DIR=/app/apps
      - CLOUDFLARE_API_EMAIL=${CLOUDFLARE_API_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
      - DEPLOYMENT_MANAGER_AUTH_EMAIL=${DEPLOYMENT_MANAGER_AUTH_EMAIL}
      - DEPLOYMENT_MANAGER_AUTH_PASSWORD=${DEPLOYMENT_MANAGER_AUTH_PASSWORD}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - NEXT_PUBLIC_DEPLOYMENT_MANAGER_HOST=${DEPLOYMENT_MANAGER_HOST}
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - IMGPROXY_HOST=${IMGPROXY_HOST}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - port_au_next_network

networks:
  port_au_next_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  nginx_cache:
  minio_data: